{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introducing-willi-api","title":"Introducing willi-api.","text":"<p>willi-api is an excellent tool that showcases a diverse selection of random images featuring willi (in short for William), an adorable Latvian cat who is owned by Richard.</p> <p></p> <p>Such a cute cat right?</p> <p>But don't be fooled by its simplicity! Willi-API is the perfect tool for a variety of humorous purposes. Want to brighten up your day with some cute and funny pictures of cats? Willi-API has got you covered !</p> <p>In addition, Willi-API can also be used to inspire creativity and humor.</p> <p>Use the images as a starting point for creating anything your creativity takes you.</p> <p>And who knows, maybe willi da cat will become the next big meme sensation.</p>"},{"location":"example/","title":"Example","text":"<p>Here is an example of a program written in java that uses <code>willi-api</code> to fetch messages and display it in a gui</p>"},{"location":"example/#preview","title":"preview","text":""},{"location":"example/#code","title":"code","text":""},{"location":"example/#williviewerjava","title":"WilliViewer.java","text":"<pre><code>import java.awt.BorderLayout;\nimport java.awt.Image;\nimport java.awt.Toolkit;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.net.URL;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\npublic class WilliViewer extends JFrame {\n    private static final long serialVersionUID = 1L;\n    private URL imageUrl;\n\n    public WilliViewer() {\n        setTitle(\"Willi Viewer\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        try {\n            imageUrl = new URL(\"https://willi-api.xwqx.cf/api\");\n            Image img = Toolkit.getDefaultToolkit().createImage(imageUrl);\n\n            ImageIcon icon = new ImageIcon(img);\n            JLabel label = new JLabel(icon);\n            add(label, BorderLayout.CENTER);\n\n            JPanel topPanel = new JPanel(new BorderLayout());\n            add(topPanel, BorderLayout.NORTH);\n\n            JButton refreshButton = new JButton(\"Refresh\");\n            refreshButton.addActionListener(new ActionListener() {\n                public void actionPerformed(ActionEvent e) {\n                    new Thread(new Runnable() {\n                        public void run() {\n                            try {\n                                Image newImg = Toolkit.getDefaultToolkit().createImage(imageUrl);\n                                ImageIcon newIcon = new ImageIcon(newImg);\n                                label.setIcon(newIcon);\n                            } catch (Exception ex) {\n                                ex.printStackTrace();\n                            }\n                        }\n                    }).start();\n                }\n            });\n            JPanel buttonPanel = new JPanel();\n            buttonPanel.add(refreshButton);\n            topPanel.add(buttonPanel, BorderLayout.EAST);\n\n            String[] styles = {\"Default\", \"Monochrome\", \"Inverted Color\"};\n            JComboBox&lt;String&gt; styleDropdown = new JComboBox&lt;String&gt;(styles);\n            styleDropdown.addActionListener(new ActionListener() {\n                public void actionPerformed(ActionEvent e) {\n                    String style = (String) styleDropdown.getSelectedItem();\n                    try {\n                        switch (style) {\n                            case \"Default\":\n                                imageUrl = new URL(\"https://willi-api.xwqx.cf/api\");\n                                break;\n                            case \"Monochrome\":\n                                imageUrl = new URL(\"https://willi-api.xwqx.cf/api?style=monochrome\");\n                                break;\n                            case \"Inverted Color\":\n                                imageUrl = new URL(\"https://willi-api.xwqx.cf/api?style=invertedcolor\");\n                                break;\n                            default:\n                                break;\n                        }\n                        new Thread(new Runnable() {\n                            public void run() {\n                                try {\n                                    Image newImg = Toolkit.getDefaultToolkit().createImage(imageUrl);\n                                    ImageIcon newIcon = new ImageIcon(newImg);\n                                    label.setIcon(newIcon);\n                                } catch (Exception ex) {\n                                    ex.printStackTrace();\n                                }\n                            }\n                        }).start();\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            });\n            JPanel stylePanel = new JPanel();\n            stylePanel.add(styleDropdown);\n            topPanel.add(stylePanel, BorderLayout.WEST);\n\n            pack();\n            setLocationRelativeTo(null);\n            setVisible(true);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        new WilliViewer();\n    }\n}\n</code></pre>"},{"location":"example/#explanation","title":"Explanation","text":"<p>The code is a Java program that creates a GUI application called WilliViewer. This application displays an image fetched from a URL endpoint. The image can be refreshed by clicking a button or changing a drop-down menu option, which also changes the image style.</p> <p>The WilliViewer class extends the JFrame class, which means that it creates a top-level window that contains other GUI components. The constructor of WilliViewer sets up the initial state of the GUI components.</p> <pre><code>public class WilliViewer extends JFrame {\n    private static final long serialVersionUID = 1L;\n    private URL imageUrl;\n\n    public WilliViewer() {\n        setTitle(\"Willi Viewer\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        // ...\n    }\n}\n</code></pre> <p>The private URL imageUrl is an instance variable that holds the URL of the image endpoint. The setTitle() method sets the title of the window to \"Willi Viewer\". The setDefaultCloseOperation() method specifies that the application should exit when the window is closed.</p> <p>The constructor initializes the imageUrl variable with the URL of the image endpoint.</p> <pre><code>try {\n    imageUrl = new URL(\"https://willi-api.xwqx.cf/api\");\n    // ...\n} catch (Exception ex) {\n    ex.printStackTrace();\n}\n</code></pre> <p>The try block creates a new URL object with the endpoint URL. If an exception occurs during this operation, the catch block prints the stack trace of the exception.</p> <p>The constructor then creates a JLabel component that displays the image using an ImageIcon.</p> <pre><code>Image img = Toolkit.getDefaultToolkit().createImage(imageUrl);\nImageIcon icon = new ImageIcon(img);\nJLabel label = new JLabel(icon);\nadd(label, BorderLayout.CENTER);\n</code></pre> <p>The Toolkit.getDefaultToolkit().createImage() method creates a new Image object from the imageUrl. The ImageIcon constructor takes the Image object as a parameter and creates a new ImageIcon object. The JLabel constructor takes the ImageIcon object as a parameter and creates a new JLabel object that displays the image.</p> <p>The add() method adds the JLabel to the center of the JFrame using the BorderLayout.CENTER constant.</p> <p>The constructor then sets up a JPanel component at the top of the JFrame that contains a JButton and a JComboBox.</p> <pre><code>JPanel topPanel = new JPanel(new BorderLayout());\nadd(topPanel, BorderLayout.NORTH);\n\nJButton refreshButton = new JButton(\"Refresh\");\n// ...\nJComboBox&lt;String&gt; styleDropdown = new JComboBox&lt;String&gt;(styles);\n// ...\ntopPanel.add(buttonPanel, BorderLayout.EAST);\ntopPanel.add(stylePanel, BorderLayout.WEST);\n</code></pre> <p>The JPanel object is created with the BorderLayout layout manager and added to the top of the JFrame using the BorderLayout.NORTH constant.</p> <p>The JButton object is created with the label \"Refresh\" and an ActionListener that creates a new thread to fetch the image from the imageUrl and update the JLabel.</p> <pre><code>JButton refreshButton = new JButton(\"Refresh\");\nrefreshButton.addActionListener(new ActionListener() {\n    public void actionPerformed(ActionEvent e) {\n        new Thread(new Runnable() {\n            public void run() {\n                try {\n                    Image newImg = Toolkit.getDefaultToolkit().createImage(imageUrl);\n                    ImageIcon newIcon = new ImageIcon(newImg);\n                    label.setIcon(newIcon);\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                }\n            }\n        }).start();\n    }\n});\n</code></pre> <p>The JComboBox object is created with three options for different styles of the image. Another ActionListener is added to the JComboBox to update the imageUrl variable based on the selected style and update the JLabel with the new image.</p> <p>Two more JPanels are created to contain the JButton and JComboBox respectively, and they are added to the topPanel with the BorderLayout.EAST and BorderLayout.WEST constants.</p> <p>Finally, the pack() method is called to resize the JFrame to fit its components, setLocationRelativeTo() is called to center the JFrame on the screen, and setVisible() is called to make the JFrame visible.</p> <pre><code>pack();\nsetLocationRelativeTo(null);\nsetVisible(true);\n</code></pre> <p>The main() method simply creates a new instance of WilliViewer to start the application.</p> <pre><code>public static void main(String[] args) {\n    new WilliViewer();\n}\n</code></pre>"},{"location":"howitworks/","title":"How does it work?","text":"<p>The code is written in PHP.</p> <p>It selects a random image and checks if there are any arguments provided in the URL.</p> <p>If so, it resizes the image based on the scale argument and applies image styles based on the style argument, and outputs the resized image.</p> <p>If not, it outputs the original image without any modifications.</p> <p>The code uses the GD library to manipulate the images and the glob function to get a list of image files in the directory.</p> <p>GD Library is a PHP extension that allows us to create and manipulate images dynamically using PHP code.</p> <p>It provides various functions to create, manipulate and output images in different formats like JPEG, GIF, PNG, WBMP, etc.</p> <p>It also supports advanced image processing techniques such as antialiasing, alpha blending, and color manipulation.</p> <p>The code then sets the appropriate Content-Type header based on the image type.</p> <p></p>"},{"location":"usage/","title":"Usage","text":"<p>Its very easy to include willi-api in your projects.</p>"},{"location":"usage/#basic-usage","title":"Basic usage","text":"<p>Just use the following url</p> <pre><code>https://willi-api.xwqx.cf/api\n</code></pre>"},{"location":"usage/#html-tags","title":"HTML tags","text":"<p>Just include the following tag</p> <pre><code>&lt;img src='https://willi-api.xwqx.cf/api'/&gt;\n</code></pre>"},{"location":"usage/#javascript","title":"Javascript","text":"<p>Include the following code to fetch the image.</p> <pre><code>const img = new Image();\nimg.src = \"https://willi-api.xwqx.cf/api\";\n</code></pre> <p>You can now use the const <code>img</code> to display</p>"},{"location":"usage/#python","title":"Python","text":"<p>You have to include the following imports</p> <pre><code>import urllib.request\nfrom io import BytesIO\n</code></pre> <p>Then download the image as bytes</p> <pre><code>img_url = \"https://willi-api.xwqx.cf/api\"\nwith urllib.request.urlopen(img_url) as url:\n    img_bytes = url.read()\n</code></pre> <p>At last load the image from the bytes</p> <pre><code>img = Image.open(BytesIO(img_bytes))\n</code></pre>"},{"location":"usage/#java","title":"Java","text":"<p>The following Java imports are required</p> <pre><code>import java.awt.Image;\nimport java.awt.Toolkit;\nimport java.net.URL;\n</code></pre> <p>You can then create an <code>image</code> object from the url and use it</p> <pre><code>imageUrl = new URL(\"https://willi-api.xwqx.cf/api\");\nImage img = Toolkit.getDefaultToolkit().createImage(imageUrl);\n</code></pre>"},{"location":"usage/#arguments","title":"Arguments","text":"<p>willi-api allows certain customization of the images.</p> <p>As of right now it supports <code>2</code> arguments:</p> <ul> <li>scale</li> <li>style</li> </ul>"},{"location":"usage/#scale","title":"scale","text":"<p>scale allows you to scale the images up or down</p> <p>To use it you have to add the `scale=percentage' argument</p> <pre><code>&lt;img src='https://willi-api.xwqx.cf/api?scale=40%'/&gt;\n</code></pre> <p>In this case, It should output an image 40% of its original dimensions while preserving the aspect ratio.</p> <p></p>"},{"location":"usage/#style","title":"style","text":"<p>Adds a bunch of styles</p> <p>As of right now the style argument has 2 sub options:</p> <p>It renders the image in monochrome</p> <p>To use it you have to add the `style=monochrome' argument</p> <pre><code>&lt;img src='https://willi-api.xwqx.cf/api?style=monochrome'/&gt;\n</code></pre> <p>It should render an image like this</p> <p></p> <p>It renders the color of the image as inverted</p> <p>To use it you have to add the <code>style=invertedcolor</code></p> <pre><code>&lt;img src='https://willi-api.xwqx.cf/api?style=invertedcolor'/&gt;\n</code></pre> <p>It should render an image like this</p> <p></p>"},{"location":"usage/#monochrome","title":"monochrome","text":""},{"location":"usage/#invertedcolor","title":"invertedcolor","text":""}]}